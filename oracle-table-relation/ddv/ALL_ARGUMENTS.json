[ [ "OWNER", "VARCHAR2(128)", "<p><code>NOT NULL</code></p>", "<p>Owner of the object</p>" ], [ "OBJECT_NAME", "VARCHAR2(128)", "&nbsp;", "<p>Name of the procedure or function</p>" ], [ "PACKAGE_NAME", "VARCHAR2(128)", "&nbsp;", "<p>Name of the package</p>" ], [ "OBJECT_ID", "NUMBER", "<p><code>NOT NULL</code></p>", "<p>Object number of the object</p>" ], [ "OVERLOAD", "VARCHAR2(40)", "&nbsp;", "<p>Indicates the <span class=\"italic\"><code>n</code></span>th overloading ordered by its appearance in the source; otherwise, it is NULL.</p>" ], [ "SUBPROGRAM_ID", "NUMBER", "&nbsp;", "<p>Unique subprogram identifier</p>" ], [ "ARGUMENT_NAME", "VARCHAR2(128)", "&nbsp;", "<p>If the argument is a scalar type, then the argument name is the name of the argument. A null argument name is used to denote a function return. If the function return or argument is a composite type, this view will have one row for each attribute of the composite type. Attributes are recursively expanded if they are composite.</p>\n<p>The meanings of <code>ARGUMENT_NAME</code>, <code>POSITION</code>, <code>SEQUENCE</code>, and <code>DATA_LEVEL</code> are interdependent. Together, as a tuple, they represent a node of a flattened tree.</p>\n<p><code>ARGUMENT_NAME</code> can refer to any of the following:</p>\n<ul style=\"list-style-type: disc;\">\n<li>\n<p>Return type, if <code>ARGUMENT_NAME</code> is null and <code>DATA_LEVEL</code> = 0</p>\n</li>\n<li>\n<p>The argument that appears in the argument list if <code>ARGUMENT_NAME</code> is not null and <code>DATA_LEVEL</code> = 0</p>\n</li>\n<li>\n<p>Attribute name of the composite type if <code>ARGUMENT_NAME</code> is not null and <code>DATA_LEVEL</code> &gt; 0;</p>\n</li>\n<li>\n<p>A collection element type if <code>ARGUMENT_NAME</code> is null and <code>DATA_LEVEL</code> &gt; 0;</p>\n</li>\n</ul>" ], [ "POSITION", "NUMBER", "<p><code>NOT NULL</code></p>", "<p>If <code>DATA_LEVEL</code> is zero, then this column holds the position of this item in the argument list, or zero for a function return value.If <code>DATA_LEVEL</code> is greater than zero, then this column holds the position of this item with respect to its siblings at the same <code>DATA_LEVEL</code>. So, for a referenced record field, this is the index of the field within the record. For a referenced collection element, this is 1 (because collection elements do not have siblings.)</p>" ], [ "SEQUENCE", "NUMBER", "<p><code>NOT NULL</code></p>", "<p>Defines the sequential order of the argument and its attributes. Argument sequence starts from 1. Return type and its recursively expanded (preorder tree walk) attributes will come first, and each argument with its recursively expanded (preorder tree walk) attributes will follow.</p>" ], [ "DATA_LEVEL", "NUMBER", "<p><code>NOT NULL</code></p>", "<p>Nesting depth of the argument for composite types</p>" ], [ "DATA_TYPE", "VARCHAR2(30)", "&nbsp;", "<p>Datatype of the argument</p>" ], [ "DEFAULTED", "VARCHAR2(1)", "&nbsp;", "<p>Specifies whether or not the argument is defaulted</p>" ], [ "DEFAULT_VALUE", "LONG", "&nbsp;", "<p>Reserved for future use</p>" ], [ "DEFAULT_LENGTH", "NUMBER", "&nbsp;", "<p>Reserved for future use</p>" ], [ "IN_OUT", "VARCHAR2(9)", "&nbsp;", "<p>Direction of the argument:</p>\n<ul style=\"list-style-type: disc;\">\n<li>\n<p><code>IN</code></p>\n</li>\n<li>\n<p><code>OUT</code></p>\n</li>\n<li>\n<p><code>IN/OUT</code></p>\n</li>\n</ul>" ], [ "DATA_LENGTH", "NUMBER", "&nbsp;", "<p>Length of the column (in bytes)</p>" ], [ "DATA_PRECISION", "NUMBER", "&nbsp;", "<p>Length in decimal digits (<code>NUMBER</code>) or binary digits (<code>FLOAT</code>)</p>" ], [ "DATA_SCALE", "NUMBER", "&nbsp;", "<p>Digits to the right of the decimal point in a number</p>" ], [ "RADIX", "NUMBER", "&nbsp;", "<p>Argument radix for a number</p>" ], [ "CHARACTER_SET_NAME", "VARCHAR2(44)", "&nbsp;", "<p>Character set name for the argument</p>" ], [ "TYPE_OWNER", "VARCHAR2(128)", "&nbsp;", "<p>Owner of the type of the argument</p>" ], [ "TYPE_NAME", "VARCHAR2(128)", "&nbsp;", "<p>Name of the type of the argument. If the type is a package local type (that is, it is declared in a package specification), then this column displays the name of the package.</p>" ], [ "TYPE_SUBNAME", "VARCHAR2(128)", "&nbsp;", "<p>Relevant only for package local types. Displays the name of the type declared in the package identified in the <code>TYPE_NAME</code> column.</p>" ], [ "TYPE_LINK", "VARCHAR2(128)", "&nbsp;", "<p>Relevant only for package local types when the package identified in the <code>TYPE_NAME</code> column is a remote package. This column displays the database link used to refer to the remote package.</p>" ], [ "PLS_TYPE", "VARCHAR2(128)", "&nbsp;", "<p>For numeric arguments, the name of the PL/SQL type of the argument. Null otherwise.</p>" ], [ "CHAR_LENGTH", "NUMBER", "&nbsp;", "<p>Character limit for string datatypes</p>" ], [ "CHAR_USED", "VARCHAR2(1)", "&nbsp;", "<p>Indicates whether the byte limit (<code>B</code>) or char limit (<code>C</code>) is official for the string</p>" ], [ "ORIGIN_CON_ID", "VARCHAR2(256)", "&nbsp;", "<p>The ID of the container where the data originates. Possible values include:</p>\n<ul style=\"list-style-type: disc;\">\n<li>\n<p><code>0</code>: This value is used for rows in non-CDBs. This value is not used for CDBs.</p>\n</li>\n<li>\n<p><span class=\"italic\">n</span>: This value is used for rows containing data that originate in the container with container ID <span class=\"italic\">n</span> (<span class=\"italic\">n</span> = 1 if the row originates in root)</p>\n</li>\n</ul>" ] ]